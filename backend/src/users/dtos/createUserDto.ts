import {
  IsString,
  IsEmail,
  IsEnum,
  IsOptional,
  Validate,
  MaxLength,
  Matches,
  ValidatorConstraint,
  ValidatorConstraintInterface,
  ValidationArguments,
} from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';
import { Column } from 'typeorm';
import { Transform, Type } from 'class-transformer';
import { userRole } from '../enums/userRole.enum';

export class CreateUserDto {
  /**
   * Email field
   */
  @ApiProperty({
    type: 'string',
    example: 'fatimaaminu@mail.com',
  })
  @IsEmail()
  @MaxLength(150)
  email: string;

  @ApiProperty({
    type: 'string',
    example: 'fatimaaminu@mail.com',
  })
  @IsString()
  @MaxLength(150)
  username: string;

  @ApiProperty({
    type: 'string',
    example: 'Fatima Aminu',
    description: 'Full name of the user',
  })
  @IsString()
  @MaxLength(150)
  fullname: string;

  /**
   * Password should contain numbers, alphabets, and uppercase
   */
  @ApiProperty({
    type: 'string',
    example: '@Password123',
    description:
      'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',
  })
  @IsString()
  @MaxLength(225)
  @Matches(
    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,
    {
      message:
        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',
    },
  )
  password?: string;

  /**
   * User role
   */
  @ApiProperty({
    enum: userRole,
    example: userRole.USER,
  })
  @IsEnum(userRole)
  @IsOptional()
  @Transform(({ value }) => value ?? userRole.USER)
  userRole?: userRole;

  /**
   * Autogenerated from Google when signing up with Google
   */
  @ApiProperty({
    type: 'string',
    example: 'poiuytrdspoiuytrewa\zxcvbnmml;poiuytrdsdcvbnm]',
  })
  @IsString()
  @IsOptional()
  @MaxLength(225)
  googleId?: string;
}
