import {
  IsString,
  IsEmail,
  IsEnum,
  IsOptional,
  MaxLength,
  Matches,
  IsArray,
  ArrayNotEmpty,
} from 'class-validator';
import { ApiProperty } from '@nestjs/swagger'
import { Transform } from 'class-transformer';
import { userRole } from '../enums/userRole.enum';
import { ChallengeLevel } from '../enums/challengeLevel.enum';
import { ChallengeType } from '../enums/challengeType.enum';
import { ReferralSource } from '../enums/referralSource.enum';
import { AgeGroup } from '../enums/ageGroup.enum';
import { AuthProvider } from '../../auth/enum/authProvider.enum';


export class CreateUserDto {
  /**
   * Email field
   */
  @ApiProperty({
    type: 'string',
    example: 'fatimaaminu@mail.com',
  })
  @IsEmail()
  @IsOptional()
  @MaxLength(150)
  email?: string;

  @ApiProperty({
    type: 'string',
    example: 'fatimaaminu@mail.com',
  })
  @IsString()
  @IsOptional()
  @MaxLength(150)
  username?: string;

  @ApiProperty({
    type: 'string',
    example: 'Fatima Aminu',
    description: 'Full name of the user',
  })
  @IsString()
  @IsOptional()
  @MaxLength(150)
  fullname?: string;

  /**
   * Password should contain numbers, alphabets, and uppercase
   */
  @ApiProperty({
    type: 'string',
    example: '@Password123',
    description:
      'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',
  })
  @IsString()
  @IsOptional()
  @MaxLength(225)
  @Matches(
    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,
    {
      message:
        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',
    },
  )
  password?: string;

  /**
   * User role
   */
  @ApiProperty({
    enum: userRole,
    example: userRole.USER,
  })
  @IsEnum(userRole)
  @IsOptional()
  @Transform(({ value }) => value ?? userRole.USER)
  userRole?: userRole;

  /**
   * Wallet address (required for wallet signup)
   */
  @ApiProperty({
    example: '0x1234567890abcdef...',
    required: false,
  })
  @IsString()
  @IsOptional()
  walletAddress?: any;

  /**
   * Public key (required for wallet signup)
   */
  @ApiProperty({
    example: '0xabcdef123456...',
    required: false,
  })
  @IsString()
  @IsOptional()
  publicKey?: any;

  /**
   * Auth provider (local, google, wallet)
   */
  @ApiProperty({
    enum: AuthProvider,
    example: AuthProvider.LOCAL,
    required: false,
  })
  @IsEnum(AuthProvider)
  @IsOptional()
  provider?: any;
  /**
   * Autogenerated from Google when signing up with Googlee
   */
  @ApiProperty({
    type: 'string',
    example: 'poiuytrdspoiuytrewa\zxcvbnmml;poiuytrdsdcvbnm]',
  })
  @IsString()
  @IsOptional()
  @MaxLength(225)
  googleId?: string;



  @ApiProperty({
    enum: ChallengeLevel,
    example: ChallengeLevel.INTERMEDIATE,
  })
  @IsOptional()
  @IsEnum(ChallengeLevel)
  challengeLevel: ChallengeLevel;

  @ApiProperty({
    enum: ChallengeType,
    isArray: true,
    example: [ChallengeType.CODING, ChallengeType.LOGIC],
  })
  @IsOptional()
  @IsArray()
  @ArrayNotEmpty()
  @IsEnum(ChallengeType, { each: true })
  challengeTypes: ChallengeType[];

  @ApiProperty({
    enum: ReferralSource,
    example: ReferralSource.GOOGLE,
    required: false,
  })
  @IsOptional()
  @IsEnum(ReferralSource)
  referralSource?: ReferralSource;

  @ApiProperty({
    enum: AgeGroup,
    example: AgeGroup.YOUNG_ADULT,
  })
  @IsOptional()
  @IsEnum(AgeGroup)
  ageGroup: AgeGroup;
}
